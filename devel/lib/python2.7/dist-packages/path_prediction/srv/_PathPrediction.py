# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_prediction/PathPredictionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PathPredictionRequest(genpy.Message):
  _md5sum = "855307df22ab0724c19d3c235d483061"
  _type = "path_prediction/PathPredictionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] input
int16 input_rows
int16 input_cols
"""
  __slots__ = ['input','input_rows','input_cols']
  _slot_types = ['int32[]','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input,input_rows,input_cols

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPredictionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = []
      if self.input_rows is None:
        self.input_rows = 0
      if self.input_cols is None:
        self.input_cols = 0
    else:
      self.input = []
      self.input_rows = 0
      self.input_cols = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.input)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.input))
      _x = self
      buff.write(_get_struct_2h().pack(_x.input_rows, _x.input_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.input = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 4
      (_x.input_rows, _x.input_cols,) = _get_struct_2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.input)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.input.tostring())
      _x = self
      buff.write(_get_struct_2h().pack(_x.input_rows, _x.input_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.input = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 4
      (_x.input_rows, _x.input_cols,) = _get_struct_2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_prediction/PathPredictionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PathPredictionResponse(genpy.Message):
  _md5sum = "a2a690181fe921dc255ee3ae2e47e366"
  _type = "path_prediction/PathPredictionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] prediction
uint8 pred_rows
uint8 pred_cols

"""
  __slots__ = ['prediction','pred_rows','pred_cols']
  _slot_types = ['float32[]','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prediction,pred_rows,pred_cols

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPredictionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prediction is None:
        self.prediction = []
      if self.pred_rows is None:
        self.pred_rows = 0
      if self.pred_cols is None:
        self.pred_cols = 0
    else:
      self.prediction = []
      self.pred_rows = 0
      self.pred_cols = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.prediction)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.prediction))
      _x = self
      buff.write(_get_struct_2B().pack(_x.pred_rows, _x.pred_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prediction = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 2
      (_x.pred_rows, _x.pred_cols,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.prediction)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.prediction.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.pred_rows, _x.pred_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prediction = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 2
      (_x.pred_rows, _x.pred_cols,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class PathPrediction(object):
  _type          = 'path_prediction/PathPrediction'
  _md5sum = '81867dfe7d3311b753270178479e45b9'
  _request_class  = PathPredictionRequest
  _response_class = PathPredictionResponse
